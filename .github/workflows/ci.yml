jobs:
  eval-rules:
    name: Evaluate Rules
    outputs:
      should_run: ${{ steps.eval-rules.outputs.should_run }}
    runs-on: ubuntu-latest
    steps:
      - name: Eval Rules
        id: eval-rules
        env:
          SHOULD_RUN: ${{ github.event_name == 'pull_request' || github.event_name == 'push' || (github.event_name == 'pull_request_review' && github.event.review.state == 'approved'  && github.event.pull_request.title == 'Update pre-commit hooks') }}
        run: echo "should_run=${SHOULD_RUN}" >> "$GITHUB_OUTPUT"
  complete-coveralls:
    if: needs.eval-rules.outputs.should_run == 'true'
    needs: test-multi-python
    name: Check Coveralls
    runs-on: ubuntu-latest
    steps:
      - name: Coveralls
        uses: coverallsapp/github-action@master
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          parallel-finished: true
  lint-multi-os:
    if: needs.eval-rules.outputs.should_run == 'true'
    name: Lint ${{ matrix.os }}
    needs: eval-rules
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: 3.x
      - uses: actions/cache@v3
        with:
          key: v0-${{ runner.os }}-pip-lint-${{ hashFiles('setup.py') }}
          path: ~/.cache/pip
          restore-keys: |
            v0-${{ runner.os }}-pip-lint-
            v0-${{ runner.os }}-pip-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install .[lint]
      - name: Run pre-commit hooks
        uses: pre-commit/action@v2.0.3
      - name: Run sphinx
        if: endsWith(inputs.package, 'praw')
        run: sphinx-build -W --keep-going docs/ /tmp/foo
    strategy:
      matrix:
        os: [ macOS-latest, ubuntu-latest, windows-latest ]
  test-multi-os:
    if: needs.eval-rules.outputs.should_run == 'true'
    name: Test ${{ matrix.os }}
    needs: eval-rules
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: 3.x
      - uses: actions/cache@v3
        with:
          key: v0-${{ runner.os }}-pip-test-${{ hashFiles('setup.py') }}
          path: ~/.cache/pip
          restore-keys: |
            v0-${{ runner.os }}-pip-test-
            v0-${{ runner.os }}-pip-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install .[test]
      - name: Test with pytest
        env:
          ENSURE_NO_UNUSED_CASSETTES: 1
        run: pytest
    strategy:
      matrix:
        os: [ macOS-latest, ubuntu-latest, windows-latest ]
  test-multi-python:
    if: needs.eval-rules.outputs.should_run == 'true'
    name: Test Python ${{ matrix.python-version }}
    needs: eval-rules
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - uses: actions/cache@v3
        with:
          key: v0-${{ runner.os }}-pip-test-${{ hashFiles('setup.py') }}
          path: ~/.cache/pip
          restore-keys: |
            v0-${{ runner.os }}-pip-test-
            v0-${{ runner.os }}-pip-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install .[ci,test]
      - name: Test with pytest
        run: coverage run --source ${{ inputs.package }} --module pytest
        env:
          ENSURE_NO_UNUSED_CASSETTES: 1
      - name: Submit to coveralls
        env:
          COVERALLS_PARALLEL: true
          COVERALLS_REPO_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: coveralls --service=github
      - name: Check coverage
        run: coverage report -m --fail-under=100
    strategy:
      matrix:
        python-version: [ "3.8", "3.9", "3.10", "3.11", "3.12" ]
  test-network:
    if: endsWith(inputs.package, 'praw') && needs.eval-rules.outputs.should_run == 'true'
    needs: eval-rules
    name: Test Network Request
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: 3.x
      - uses: actions/cache@v3
        with:
          key: v0-${{ runner.os }}-pip-test-${{ hashFiles('setup.py') }}
          path: ~/.cache/pip
          restore-keys: |
            v0-${{ runner.os }}-pip-test-
            v0-${{ runner.os }}-pip-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install .[test]
      - name: Run network test
        run: pytest tests/integration/test_github_actions.py::test_github_actions
        env:
          NETWORK_TEST_CLIENT_ID: ${{ secrets.NETWORK_TEST_CLIENT_ID }}
          NETWORK_TEST_CLIENT_SECRET: ${{ secrets.NETWORK_TEST_CLIENT_SECRET }}
name: CI
on:
  workflow_call:
    inputs:
      package:
        required: true
        type: string
permissions: read-all
